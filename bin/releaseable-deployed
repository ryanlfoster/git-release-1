#!/bin/bash -e
set -e

############################################################
#####              Releasable-Deployed                 #####
###   Pure bash script for handling deployed releases    ###
###       Providing a tag with generated changelog       ###
############################################################


#Psuedo =>
#Pass in tag released
#Pass in prefix for deployment tag
#Optional : append/overwrite CHANGELOG
#Optional : changelog scope
#Optional : Force push
#Optional : Start + End point

#Error ->
    #Not a GIT repo
    # Dirty git repo
    # Tag not found

#Checkout existing tag
#Generate new changelog with diff from last deployed tag to current one
#   - Get version prefix -> find last tag -> generate changelog with that start point
#Create tag with deploy prefix
#Push tag (optional)

############################################################
#####                   DEFAULTS                       #####
############################################################

DEPLOYED_PREFIX='deployed/'
CHANGELOG_FILE='CHANGELOG'
CHANGELOG_SCOPE=':all_commits'
CHANGELOG_STRATEGY=':overwrite'

START_POINT=''
END_POINT=''

#Supporting functions
. "${BASH_SOURCE[0]%/*}/../support/support-functions.sh"

USAGE_OUTPUT="
usage : $(basename "$0") $(arg_for $ARG_DEPLOYED_TAG '<deployed_tag>') [$(arg_for $ARG_RELEASE_PREFIX '<prefix>')] [$(arg_for $ARG_START '<start>')] [$(arg_for $ARG_FINISH '<finish>')]
                         [$(arg_for $ARG_APPEND)] [$(arg_for $ARG_PULL_REQUESTS)] [$(arg_for $ARG_CHANGELOG '<changelog_file>')]
                         [$(arg_for $ARG_HELP_TEXT)] [-t]
                         --- create git release tag for a deployed releaseable with a generated changelog.

options:
  required:
    $(arg_for $ARG_DEPLOYED_TAG '<deployed_tag>') set the deployed tag name
  optional:
    [$(arg_for $ARG_RELEASE_PREFIX '<prefix>')]     set the prefix for the new deployment tag (default: 'deployed/')
  changelog:
    [$(arg_for $ARG_START '<start>')]      set the start point (default: the last deployed tag)
    [$(arg_for $ARG_FINISH '<finish>')]     set the end/finish point (default: HEAD)
    [$(arg_for $ARG_APPEND)]                append to changelog (default: overwrite)
    [$(arg_for $ARG_PULL_REQUESTS)]                set to only pull requests (default: all commits)
    [$(arg_for $ARG_CHANGELOG '<changelog_file>')]   set the changelog filename (default: CHANGELOG)
  general:
    [$(arg_for $ARG_HELP_TEXT)]  show this help text
    -t  test only (will not execute script)


usage examples:

  1) Basic usage with defaults
    Given the last deployed release was 'releases/v1.1.4' :

    $(basename "$0") $(arg_for $ARG_DEPLOYED_TAG 'releases/v1.1.4') $(arg_for $ARG_RELEASE_PREFIX 'deploys/staging')

    Tag generated           : deploys/staging/our-releases/REL1.1.4
    CHANGELOG file contains : commit information for all commits between last deployed version and current release

  2) Pull requests only (changelog generated only with body of pull request titles)

    $(basename "$0") $(arg_for $ARG_DEPLOYED_TAG 'releases/v1.0.4') $(arg_for $ARG_PULL_REQUESTS)

  3) Generate custom changelog for deployed versions

   $(basename "$0") $(arg_for $ARG_DEPLOYED_TAG 'releases/v1.0.4') $(arg_for $ARG_CHANGELOG 'DEPLOYEDCHANGELOG')

"

############################################################
#####                  INPUT CAPTURE                   #####
############################################################

while getopts "$ARG_HELP_TEXT"t"$ARG_APPEND""$ARG_PULL_REQUESTS""$ARG_DEPLOYED_TAG":"$ARG_START":"$ARG_CHANGELOG":"$ARG_FINISH":"$ARG_RELEASE_PREFIX": option
do
  case "${option}"
  in
    $ARG_DEPLOYED_TAG) DEPLOYED_TAG="$OPTARG";;
    $ARG_RELEASE_PREFIX) DEPLOYED_PREFIX="$OPTARG";;
    $ARG_START) START_POINT="$OPTARG";;
    $ARG_FINISH) END_POINT="$OPTARG";;
    $ARG_APPEND) CHANGELOG_STRATEGY=":append";;
    $ARG_PULL_REQUESTS) CHANGELOG_SCOPE=":pulls_only";;
    $ARG_CHANGELOG) CHANGELOG_FILE="$OPTARG";;
    $ARG_HELP_TEXT)
      echo "$USAGE_OUTPUT" >&2
      exit 0
      ;;
    t) SKIP_EXECUTE=true;;
    ?)
      printf "illegal option: '%s'\n" "$OPTARG" >&2
      echo "$USAGE_OUTPUT" >&2
      exit 1
      ;;
  esac
done
shift $((OPTIND - 1))


if [ ! $SKIP_EXECUTE ]; then
  ############################################################
  #####                  VALIDATION                      #####
  ############################################################

  ensure_git_directory
  ensure_git_is_clean
  validate_deploy_tag "$DEPLOYED_TAG" "$USAGE_OUTPUT"

  ############################################################
  #####                RELEASE-DEPLOYED                  #####
  ############################################################

  #Checkout existing deployed tag
  next_deploy_tag_name="${DEPLOYED_PREFIX}${DEPLOYED_TAG}"

  if [[ $(check_tag_exists "$next_deploy_tag_name" && echo $?) = "0" ]]; then
    #Delete existing
    git tag -d $next_deploy_tag_name
  fi;
  git checkout -f --no-track -B "$next_deploy_tag_name" "$DEPLOYED_TAG"

  #Capture versioning prefix from new deploy tag
  versioning_prefix=$(get_versioning_prefix_from_tag "$next_deploy_tag_name")

  #Find last deployed tag for this versioning style
  last_tag_name=$(get_last_tag_name $versioning_prefix)

  deployed_version_number=$(get_version_number_from_tag "$next_deploy_tag_name")
  if [[ "$START_POINT" = '' ]]; then
    START_POINT=$last_tag_name
  fi;

  changelog_content=$( generate_changelog_content "$deployed_version_number" "$CHANGELOG_SCOPE" "$START_POINT" "$END_POINT" )

  generate_changelog_file "$changelog_content" "$CHANGELOG_STRATEGY" "$CHANGELOG_FILE"

  #Create tag and optionally push
  git add -A
  git commit -m "Release deployed : ${DEPLOYED_TAG}"

  git tag -f $next_deploy_tag_name

  #Optional force push of tag
  #git push --tags
fi;
